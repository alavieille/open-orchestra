# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition.  Set this to point to your content
# server.
#

acl purgers {
  "127.0.0.1";
}

backend f1 {
  .host = "127.0.1.1";
  .port = "8000";
}

backend f2 {
  .host = "127.0.1.1";
  .port = "{{ apache_main_port }}";
}

director front round-robin {
    {
        .backend = f1;
    }
    {
        .backend = f2;
    }
}

sub vcl_recv {
    set req.http.Surrogate-Capability = "abc=ESI/1.0";
    set req.backend = front;

    if (req.request == "BAN") {
        if (!client.ip ~ purgers) {
             error 405 "Method not allowed";
        }
        ban("req.url ~ "+req.url);
        error 200 "Cached Cleared Successfully.";
    }

    if (req.request == "PURGE") {
        if (!client.ip ~ purgers) {
             error 405 "Method not allowed";
        }
        return(lookup);
     }

    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    {% for item in backend_conf %}
        {% if item.admin is defined and item.admin is sameas true %}
            {% if loop.first -%}
                if
            {%- else -%}
                elseif
            {%- endif -%}
             (req.http.host ~ "({{ item.host }})") {

                return (pass);
            }
        {% endif %}
    {% endfor %}

    if (req.request == "POST") {
        return(pass);
    }

    if (req.url ~ "^/preview") {
        return (pass);
    }

    return(lookup);
}

sub vcl_fetch {
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }

    if (beresp.ttl > 0s) {
      unset beresp.http.Set-Cookie;
      return(deliver);
    }
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged";
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        purge;
        error 404 "Not purged";
    }
}

sub vcl_hash {
    if (req.http.X-UA-Device) {
        hash_data(req.http.X-UA-Device);
    }
}
