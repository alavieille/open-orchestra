# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
# 
# Default backend definition.  Set this to point to your content
# server.
#

acl purgers {
  "127.0.0.1";
}

{% for item in backend_conf %}
backend {{ item.name }} {
  .host = "{{ item.host }}";
  .port = "{{ item.port }}";
}

{% endfor %}


sub vcl_recv {
    set req.http.Surrogate-Capability = "abc=ESI/1.0";

    if (req.request == "BAN") {
        if (!client.ip ~ purgers) {
             error 405 "Method not allowed";
        }
        ban("req.url ~ "+req.url);
        error 200 "Cached Cleared Successfully.";
    }

    if (req.request == "PURGE") {
        if (!client.ip ~ purgers) {
             error 405 "Method not allowed";
        }
        return(lookup);
     }

    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            remove req.http.Accept-Encoding;
        }
    }

    if (req.http.host ~ "(openorchestra.dev)" || req.http.host ~ "(admin.openorchestra.inte)") {
        return (pass);
    } elseif (req.http.host ~ "(front.openorchestra.dev)" || req.http.host ~ "(front.openorchestra.inte)") {
        set req.backend = frontopenorchestra;
    } elseif (req.http.host ~ "(demo.openorchestra.dev)" || req.http.host ~ "(demo.openorchestra.inte)") {
        set req.backend = demoopenorchestra;
    } elseif (req.http.host ~ "(echonext.openorchestra.dev)" || req.http.host ~ "(echonext.openorchestra.inte)") {
        set req.backend = echonextopenorchestra;
    }

    if (req.request == "POST") {
        return(pass);
    }

    return(lookup);
}

sub vcl_fetch {

    if ( req.request == "GET") {
        if (req.url ~ "/img/" ||
            req.url ~ "/css/" ||
            req.url ~ "/js/" ||
            req.url ~ "/bundles/"
        ) {
            unset beresp.http.Set-Cookie;
            return(deliver);
        }
    }

    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged";
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        purge;
        error 404 "Not purged";
    }
}

sub vcl_hash {
    if (req.http.X-UA-Device) {
        hash_data(req.http.X-UA-Device);
    }

    return (hash);
}
